#!/usr/bin/env python3
"""
Script de prueba para el sistema multi-agente
IA Agent para Generaci√≥n de Pruebas Unitarias .NET
"""

import sys
import os
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_imports():
    """Probar importaciones del sistema"""
    print("üß™ Probando importaciones del sistema...")
    
    try:
        # Probar configuraci√≥n
        from utils.config import get_config, Config
        config = get_config()
        print("‚úÖ Configuraci√≥n importada correctamente")
        
        # Probar logging
        from utils.logging import get_logger, setup_logging
        logger = get_logger("test")
        logger.info("Sistema de logging funcionando")
        print("‚úÖ Sistema de logging funcionando")
        
        # Probar helpers
        from utils.helpers import file_helper, json_helper, yaml_helper
        print("‚úÖ Helpers importados correctamente")
        
        # Probar herramientas .NET
        from tools.dotnet_tools import project_analyzer, controller_analyzer, command_executor
        print("‚úÖ Herramientas .NET importadas correctamente")
        
        # Probar herramientas de archivos
        from tools.file_tools import file_manager, code_file_manager
        print("‚úÖ Herramientas de archivos importadas correctamente")
        
        # Probar memoria
        from langchain_agents.memory.conversation_memory import ConversationMemory
        from langchain_agents.memory.vector_memory import VectorMemory
        print("‚úÖ Sistema de memoria importado correctamente")
        
        # Probar memoria compartida
        from multi_agent.shared_memory import SharedMemory
        print("‚úÖ Memoria compartida importada correctamente")
        
        # Probar agentes base
        from agents.base_agent import BaseAgent, ReActAgent, AgentRole, AgentStatus
        print("‚úÖ Agentes base importados correctamente")
        
        # Probar agentes individuales
        from agents.analysis_agent import analysis_agent
        from agents.generation_agent import generation_agent
        from agents.validation_agent import validation_agent
        from agents.optimization_agent import optimization_agent
        from agents.coordinator_agent import coordinator_agent
        print("‚úÖ Agentes individuales importados correctamente")
        
        # Probar colaboraci√≥n multi-agente
        from multi_agent.autogen_collaboration import multi_agent_collaboration
        print("‚úÖ Colaboraci√≥n multi-agente importada correctamente")
        
        # Probar CLI
        from cli.multi_agent_cli import MultiAgentCLI
        print("‚úÖ CLI importado correctamente")
        
        print("\nüéâ ¬°Todas las importaciones exitosas!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en importaciones: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_configuration():
    """Probar sistema de configuraci√≥n"""
    print("\nüß™ Probando sistema de configuraci√≥n...")
    
    try:
        from utils.config import get_config, ConfigManager
        
        # Probar configuraci√≥n por defecto
        config = get_config()
        print(f"‚úÖ Configuraci√≥n cargada: {config.agent.name}")
        print(f"   - Modelo IA: {config.ai.model}")
        print(f"   - Modo multi-agente: {config.multi_agent.mode}")
        print(f"   - Nivel de logging: {config.agent.log_level}")
        
        # Probar gestor de configuraci√≥n
        config_manager = ConfigManager()
        config_loaded = config_manager.load_config()
        print(f"‚úÖ Gestor de configuraci√≥n funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_memory_system():
    """Probar sistema de memoria"""
    print("\nüß™ Probando sistema de memoria...")
    
    try:
        from langchain_agents.memory.conversation_memory import ConversationMemory
        from langchain_agents.memory.vector_memory import VectorMemory
        from multi_agent.shared_memory import SharedMemory
        
        # Probar memoria de conversaci√≥n
        conv_memory = ConversationMemory("test_agent")
        success = conv_memory.start_conversation("test_session")
        if success:
            conv_memory.add_message("human", "Hola, esto es una prueba")
            conv_memory.add_message("ai", "Hola, soy un agente de prueba")
            conv_memory.end_conversation()
            print("‚úÖ Memoria de conversaci√≥n funcionando")
        
        # Probar memoria vectorial
        vector_memory = VectorMemory("test_agent")
        entry_id = vector_memory.add_entry("Este es un texto de prueba", {"test": True})
        if entry_id:
            print("‚úÖ Memoria vectorial funcionando")
        
        # Probar memoria compartida
        shared_memory = SharedMemory()
        shared_memory.set_project_context("test_project", "Proyecto de Prueba", "./", "xunit")
        context = shared_memory.get_project_context()
        if context:
            print("‚úÖ Memoria compartida funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en sistema de memoria: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_agents():
    """Probar agentes individuales"""
    print("\nüß™ Probando agentes individuales...")
    
    try:
        from agents.analysis_agent import analysis_agent
        from agents.generation_agent import generation_agent
        from agents.validation_agent import validation_agent
        from agents.optimization_agent import optimization_agent
        from agents.coordinator_agent import coordinator_agent
        
        # Probar capacidades de cada agente
        agents = [
            ("An√°lisis", analysis_agent),
            ("Generaci√≥n", generation_agent),
            ("Validaci√≥n", validation_agent),
            ("Optimizaci√≥n", optimization_agent),
            ("Coordinaci√≥n", coordinator_agent)
        ]
        
        for name, agent in agents:
            try:
                capabilities = agent.get_capabilities()
                print(f"‚úÖ Agente {name}: {len(capabilities)} capacidades")
            except Exception as e:
                print(f"‚ö†Ô∏è  Agente {name}: Error al obtener capacidades - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en agentes: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_cli():
    """Probar CLI"""
    print("\nüß™ Probando CLI...")
    
    try:
        from cli.multi_agent_cli import MultiAgentCLI
        
        # Crear instancia del CLI
        cli = MultiAgentCLI()
        print("‚úÖ CLI creado correctamente")
        
        # Probar inicializaci√≥n (sin ejecutar el men√∫)
        # success = cli.initialize()
        # if success:
        #     print("‚úÖ CLI inicializado correctamente")
        # else:
        #     print("‚ö†Ô∏è  CLI no se pudo inicializar completamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en CLI: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas del sistema multi-agente")
    print("=" * 60)
    
    tests = [
        ("Importaciones", test_imports),
        ("Configuraci√≥n", test_configuration),
        ("Sistema de Memoria", test_memory_system),
        ("Agentes Individuales", test_agents),
        ("CLI", test_cli)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error cr√≠tico en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen de resultados
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El sistema est√° funcionando correctamente.")
        return True
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisar errores arriba.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
